/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC20,
  ERC20Interface,
} from "../../../../../@openzeppelin/contracts/token/ERC20/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000ef038038062000ef083398101604081905262000034916200018a565b600362000042838262000309565b50600462000051828262000309565b505050620003d5565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681016001600160401b03811182821017156200009857620000986200005a565b6040525050565b6000620000ab60405190565b9050620000b9828262000070565b919050565b60006001600160401b03821115620000da57620000da6200005a565b601f19601f83011660200192915050565b60005b8381101562000108578181015183820152602001620000ee565b50506000910152565b6000620001286200012284620000be565b6200009f565b905082815260208101848484011115620001455762000145600080fd5b62000152848285620000eb565b509392505050565b600082601f830112620001705762000170600080fd5b81516200018284826020860162000111565b949350505050565b60008060408385031215620001a257620001a2600080fd5b82516001600160401b03811115620001bd57620001bd600080fd5b620001cb858286016200015a565b602085015190935090506001600160401b03811115620001ee57620001ee600080fd5b620001fc858286016200015a565b9150509250929050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200023157607f821691505b60208210810362000246576200024662000206565b50919050565b60006200025d6200025a8381565b90565b92915050565b6200026e836200024c565b81546008840282811b60001990911b908116901990911617825550505050565b60006200029d81848462000263565b505050565b81811015620002c157620002b86000826200028e565b600101620002a2565b5050565b601f8211156200029d576000818152602090206020601f85010481016020851015620002ee5750805b620003026020601f860104830182620002a2565b5050505050565b81516001600160401b038111156200032557620003256200005a565b6200033182546200021c565b6200033e828285620002c5565b506020601f8211600181146200037657600083156200035d5750848201515b600019600885021c198116600285021785555062000302565b600084815260208120601f198516915b82811015620003a8578785015182556020948501946001909201910162000386565b5084821015620003c65783870151600019601f87166008021c191681555b50505050600202600101905550565b610b0b80620003e56000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610183578063a9059cbb14610196578063dd62ed3e146101a957600080fd5b8063395093511461013f57806370a082311461015257806395d89b411461017b57600080fd5b806318160ddd116100b257806318160ddd1461010c57806323b872dd1461011d578063313ce5671461013057600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e2565b6040516100e39190610603565b60405180910390f35b6100ff6100fa36600461065f565b610274565b6040516100e391906106a6565b6002545b6040516100e391906106ba565b6100ff61012b3660046106c8565b61028e565b60126040516100e39190610721565b6100ff61014d36600461065f565b6102b2565b61011061016036600461072f565b6001600160a01b031660009081526020819052604090205490565b6100d66102f1565b6100ff61019136600461065f565b610300565b6100ff6101a436600461065f565b61035d565b6101106101b7366004610758565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f1906107ba565b80601f016020809104026020016040519081016040528092919081815260200182805461021d906107ba565b801561026a5780601f1061023f5761010080835404028352916020019161026a565b820191906000526020600020905b81548152906001019060200180831161024d57829003601f168201915b5050505050905090565b60003361028281858561036b565b60019150505b92915050565b60003361029c85828561041f565b6102a785858561049f565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028290829086906102ec908790610815565b61036b565b6060600480546101f1906107ba565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103505760405162461bcd60e51b815260040161034790610882565b60405180910390fd5b6102a7828686840361036b565b60003361028281858561049f565b6001600160a01b0383166103915760405162461bcd60e51b8152600401610347906108ea565b6001600160a01b0382166103b75760405162461bcd60e51b815260040161034790610952565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104129085906106ba565b60405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610499578181101561048c5760405162461bcd60e51b815260040161034790610962565b610499848484840361036b565b50505050565b6001600160a01b0383166104c55760405162461bcd60e51b8152600401610347906109f5565b6001600160a01b0382166104eb5760405162461bcd60e51b815260040161034790610a5d565b6001600160a01b038316600090815260208190526040902054818110156105245760405162461bcd60e51b815260040161034790610ac5565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105829086906106ba565b60405180910390a3610499565b60005b838110156105aa578181015183820152602001610592565b50506000910152565b60006105bd825190565b8084526020840193506105d481856020860161058f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b6020808252810161061481846105b3565b9392505050565b60006001600160a01b038216610288565b6106358161061b565b811461064057600080fd5b50565b80356102888161062c565b80610635565b80356102888161064e565b6000806040838503121561067557610675600080fd5b60006106818585610643565b925050602061069285828601610654565b9150509250929050565b8015155b82525050565b60208101610288828461069c565b806106a0565b6020810161028882846106b4565b6000806000606084860312156106e0576106e0600080fd5b60006106ec8686610643565b93505060206106fd86828701610643565b925050604061070e86828701610654565b9150509250925092565b60ff81166106a0565b602081016102888284610718565b60006020828403121561074457610744600080fd5b60006107508484610643565b949350505050565b6000806040838503121561076e5761076e600080fd5b600061077a8585610643565b925050602061069285828601610643565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6002810460018216806107ce57607f821691505b6020821081036107e0576107e061078b565b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115610288576102886107e6565b60258152602081017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7781527f207a65726f000000000000000000000000000000000000000000000000000000602082015290505b60400190565b6020808252810161028881610828565b60248152602081017f45524332303a20617070726f76652066726f6d20746865207a65726f2061646481527f72657373000000000000000000000000000000000000000000000000000000006020820152905061087c565b6020808252810161028881610892565b60228152602081017f45524332303a20617070726f766520746f20746865207a65726f20616464726581527f73730000000000000000000000000000000000000000000000000000000000006020820152905061087c565b60208082528101610288816108fa565b6020808252810161028881601d81527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000602082015260400190565b60258152602081017f45524332303a207472616e736665722066726f6d20746865207a65726f20616481527f64726573730000000000000000000000000000000000000000000000000000006020820152905061087c565b602080825281016102888161099d565b60238152602081017f45524332303a207472616e7366657220746f20746865207a65726f206164647281527f65737300000000000000000000000000000000000000000000000000000000006020820152905061087c565b6020808252810161028881610a05565b60268152602081017f45524332303a207472616e7366657220616d6f756e742065786365656473206281527f616c616e636500000000000000000000000000000000000000000000000000006020820152905061087c565b6020808252810161028881610a6d56fea264697066735822122001f63ec3f2a23dca111224b41f1bb2500c71347ca421989cf5d18a93bcc55d0164736f6c63430008110033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20> {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<ERC20>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  override connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
